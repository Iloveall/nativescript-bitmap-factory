"use strict";
var BitmapFactory = require("nativescript-bitmap-factory");
var observable_1 = require("data/observable");
var KnownColors = require("color/known-colors");
function createViewModel() {
    var viewModel = new observable_1.Observable();
    var bmp = BitmapFactory.create(300);
    bmp.dispose(function (b) {
        try {
            /* b.drawRect({ x: 150, y: 150 },
                   '300x150',
                   KnownColors.Red, KnownColors.Black); */
            /* for (var i = 0; i < b.width; i++) {
    b.setPoint({ x: i, y: 150 },
                    KnownColors.Red);
            } */
            b.drawOval("300,150", "0,75", KnownColors.Red, KnownColors.Black);
            b.drawCircle(80, null, KnownColors.DarkGreen);
            b.setPoint("160,150", KnownColors.Yellow);
            b.drawLine("0,150", "300,75", KnownColors.Blue);
            // b.drawRect("150,150", "30x20", KnownColors.White);
            // var p = b.getPoint({ x: 150, y: 150 });
            // console.log("Point: " + [p.a, p.r, p.g, p.b]);
            b.writeText("This is a test! " + '\uf087', "100,100", {
                color: KnownColors.Yellow,
                size: 10,
                name: 'fontawesome-webfont',
            });
            var b2 = b.clone().resize("20x20");
            b.insert(b2, "25,25");
            viewModel.set('image', b.rotate(-37).toDataUrl());
        }
        catch (e) {
            console.log('ERROR: ' + e);
        }
    });
    console.log("Bitmap disposed!");
    console.log("Bitmap.isDisposed: " + bmp.isDisposed);
    return viewModel;
}
exports.createViewModel = createViewModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi12aWV3LW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi12aWV3LW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFPLGFBQWEsV0FBVyw2QkFBNkIsQ0FBQyxDQUFDO0FBQzlELDJCQUF5QixpQkFBaUIsQ0FBQyxDQUFBO0FBQzNDLElBQU8sV0FBVyxXQUFXLG9CQUFvQixDQUFDLENBQUM7QUFJbkQ7SUFDSSxJQUFJLFNBQVMsR0FBUSxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUV0QyxJQUFJLEdBQUcsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDO1FBQ1YsSUFBSSxDQUFDO1lBQ0Q7OzBEQUU4QztZQUU5Qzs7O2dCQUdJO1lBR0osQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xFLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFOUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRTFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFaEQscURBQXFEO1lBRXJELDBDQUEwQztZQUMxQyxpREFBaUQ7WUFFakQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsR0FBRyxRQUFRLEVBQUUsU0FBUyxFQUFFO2dCQUNsRCxLQUFLLEVBQUUsV0FBVyxDQUFDLE1BQU07Z0JBQ3pCLElBQUksRUFBRSxFQUFFO2dCQUNSLElBQUksRUFBRSxxQkFBcUI7YUFDOUIsQ0FBQyxDQUFDO1lBRUgsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUV0QixTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUN0RCxDQUNBO1FBQUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQy9CLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVwRCxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3JCLENBQUM7QUFoRGUsdUJBQWUsa0JBZ0Q5QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpdG1hcEZhY3RvcnkgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWJpdG1hcC1mYWN0b3J5XCIpO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwiZGF0YS9vYnNlcnZhYmxlXCI7XG5pbXBvcnQgS25vd25Db2xvcnMgPSByZXF1aXJlKFwiY29sb3Iva25vd24tY29sb3JzXCIpO1xuaW1wb3J0IEltYWdlU291cmNlID0gcmVxdWlyZSgnaW1hZ2Utc291cmNlJyk7XG5pbXBvcnQgSW1hZ2UgPSByZXF1aXJlKCd1aS9pbWFnZScpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVmlld01vZGVsKCkge1xuICAgIHZhciB2aWV3TW9kZWw6IGFueSA9IG5ldyBPYnNlcnZhYmxlKCk7XG5cbiAgICB2YXIgYm1wID0gQml0bWFwRmFjdG9yeS5jcmVhdGUoMzAwKTtcbiAgICBibXAuZGlzcG9zZSgoYikgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLyogYi5kcmF3UmVjdCh7IHg6IDE1MCwgeTogMTUwIH0sXG4gICAgICAgICAgICAgICAgICAgJzMwMHgxNTAnLFxuICAgICAgICAgICAgICAgICAgIEtub3duQ29sb3JzLlJlZCwgS25vd25Db2xvcnMuQmxhY2spOyAqL1xuXG4gICAgICAgICAgICAvKiBmb3IgKHZhciBpID0gMDsgaSA8IGIud2lkdGg7IGkrKykge1xuICAgIGIuc2V0UG9pbnQoeyB4OiBpLCB5OiAxNTAgfSxcbiAgICAgICAgICAgICAgICAgICAgS25vd25Db2xvcnMuUmVkKTtcbiAgICAgICAgICAgIH0gKi9cbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBiLmRyYXdPdmFsKFwiMzAwLDE1MFwiLCBcIjAsNzVcIiwgS25vd25Db2xvcnMuUmVkLCBLbm93bkNvbG9ycy5CbGFjayk7XG4gICAgICAgICAgICBiLmRyYXdDaXJjbGUoODAsIG51bGwsIEtub3duQ29sb3JzLkRhcmtHcmVlbik7XG5cbiAgICAgICAgICAgIGIuc2V0UG9pbnQoXCIxNjAsMTUwXCIsIEtub3duQ29sb3JzLlllbGxvdyk7XG5cbiAgICAgICAgICAgIGIuZHJhd0xpbmUoXCIwLDE1MFwiLCBcIjMwMCw3NVwiLCBLbm93bkNvbG9ycy5CbHVlKTtcblxuICAgICAgICAgICAgLy8gYi5kcmF3UmVjdChcIjE1MCwxNTBcIiwgXCIzMHgyMFwiLCBLbm93bkNvbG9ycy5XaGl0ZSk7XG5cbiAgICAgICAgICAgIC8vIHZhciBwID0gYi5nZXRQb2ludCh7IHg6IDE1MCwgeTogMTUwIH0pO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJQb2ludDogXCIgKyBbcC5hLCBwLnIsIHAuZywgcC5iXSk7XG5cbiAgICAgICAgICAgIGIud3JpdGVUZXh0KFwiVGhpcyBpcyBhIHRlc3QhIFwiICsgJ1xcdWYwODcnLCBcIjEwMCwxMDBcIiwge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBLbm93bkNvbG9ycy5ZZWxsb3csXG4gICAgICAgICAgICAgICAgc2l6ZTogMTAsXG4gICAgICAgICAgICAgICAgbmFtZTogJ2ZvbnRhd2Vzb21lLXdlYmZvbnQnLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBiMiA9IGIuY2xvbmUoKS5yZXNpemUoXCIyMHgyMFwiKTtcbiAgICAgICAgICAgIGIuaW5zZXJ0KGIyLCBcIjI1LDI1XCIpO1xuXG4gICAgICAgICAgICB2aWV3TW9kZWwuc2V0KCdpbWFnZScsIGIucm90YXRlKC0zNykudG9EYXRhVXJsKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6ICcgKyBlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKFwiQml0bWFwIGRpc3Bvc2VkIVwiKTtcbiAgICBjb25zb2xlLmxvZyhcIkJpdG1hcC5pc0Rpc3Bvc2VkOiBcIiArIGJtcC5pc0Rpc3Bvc2VkKTtcblxuICAgIHJldHVybiB2aWV3TW9kZWw7XG59XG4iXX0=